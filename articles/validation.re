= 動作確認結果
本章は動作確認結果について書きます。
動作確認環境は2つに分けられます。

 * シミュレーション環境
 * スタンドアロン環境 

シミュレーション環境とスタンドアロン環境の違いはPCを接続するか、しないかです。
シミュレーション環境はArduinoの実行時状態をPCでモニタリングできます。

@<img>{DevelopmentEnvironment}は動作確認環境の写真です。
//image[DevelopmentEnvironment][動作確認環境]{
//}
モーターをカート本体に取り付けて動作確認すると大きな作業スペースが必要になるためモーターをEVカートから取り外して確認します。

次に動作確認環境の構成要素を書きます。
@<table>{validationElementsTable}は動作確認環境の構成要素です。
@<table>{validationElementsTable}の「キット同梱」とはインバーター・キットセットに含まれているものです。

 * ブラシレス・モーター & インバーター・キットセット@<br>{}
   - @<href>{https://shop.cqpub.co.jp/hanbai/books/I/I000055.htm}

//table[validationElementsTable][動作確認環境の構成要素]{ 
No	構成品				内容										キット同梱
-------------------------------------------------------------------------------------------------------
1	インバーター基板	3相インバーター回路。FETが実装されている。			○
2	治具基板			インバーター基板とArduino MEGA基板を接続する。		-
3	Arduino MEGA		治具基板と接続する。モーター通電制御を行う。		-
4	ブラシレスモーター	U・V・W相の3相の信号線をインバーター基板と接続する。	○
5	モーター固定台		モーターを固定する。								○
6	ホールセンサー		3つのホールセンサーでモーター位置を特定する。			○
7	スロットル			可変抵抗で代用する。								○
8	PC					シミュレーション環境のみ。							-
9	USBケーブル			シミュレーション環境のみ。							-
10	電源供給用治具		後述のACアダプタを接続するために必要					-
11	ACアダプタ			24Vを供給。										-
12	ブレーカー			.												○
//}
PCとUSBケーブルはシミュレーション時に使用します。

== シミュレーション
シミュレーションでモデルの各種状態をモニタリングできます。@<br>{}
PCとUSBケーブルを接続し、インバーター基板の電源ONします。
Simulinkで@<img>{SimulationExe}のシミュレータタブ -> 実行を押下するとシミュレーションが開始となります。
//image[SimulationExe][Simulink シミュレーション実行画面]{
//}

@<img>{SimulationStart}はシミュレーション実行中の画面です。
//image[SimulationStart][Simulink シミュレーション実行中画面]{
//}
画面左下に「実行中」と表示され、画面右下には実行時間が表示されています。
この状態になればモデルの各種状態をモニタリングできます。

シミュレーションはArduinoとシリアル通信を行い実現しておりArduino MEGAだとできます。
シミュレーションの動作モードを「External mode」と呼びます。Arduino UNOはExternal mode未対応のためモニタリングできません。

== ホールセンサー信号検出とFET通電パターンの設定
「シミュレーションはモデルの状態をモニタリングできる」と書きましたが具体的な確認方法を説明します。
モニタリングするにはモニタリングしたい信号と「Display」または「Scope」ブロックをつなげます。

ここではホールセンサー信号とFET通電パターンを確認します。@<br>{}
モーター制御のタイミングチャートと表を再掲します。ホールセンサーのレベルから通電ステージが正しく取得できているかを確認していきます。

//image[HallandPWMControl][モーター制御のタイミングチャート]{
//}

//table[hallpattern_fet_stage_table][ホールセンサー信号とFET通電ステージ設定パターン]{ 
通電ステージ	Hall W	Hall V	Hall U	UH	VH	WH	UL	VL	WL
------------------------------------------------------------------------
1						1		0		1		PWM	0	0	0	1	0
2						0		0		1		PWM	0	0	0	0	1
3						0		1		1		0	PWM	0	0	0	1
4						0		1		0		0	PWM	0	1	0	0
5						1		1		0		0	0	PWM	1	0	0
6						1		0		0		0	0	PWM	0	1	0
//}

@<img>{stage-1}はホールセンサパターンと通電ステージ1の変換を確認している図です。
//image[stage-1][通電ステージ1]{
//}
図の枠①〜③を参照ください。@<br>{}
①はホールセンサーの信号レベルです。@<br>{}
W相は1、V相は0、U相は1とDisplayブロックに表示されています。@<br>{}

②はホールセンサーパターンです。@<br>{}
①のホールセンサー信号をビットシフトしています。@<br>{}
W相を2bit、V相は1bit、U相は0bit左シフトした結果、「5」となります。@<br>{}
②のDisplayブロックに5と表示していることがか確認できます。@<br>{}

③は通電ステージです。@<br>{}
②のホールセンサーパターンから通電ステージを取得します。@<br>{}
ホールセンサーパターン5は通電ステージ1になります。@<br>{}
③のDisplayに1と表示されていることが確認できます。@<br>{}

@<img>{HallandPWMControl}、@<table>{hallpattern_fet_stage_table}の記載とおりの結果となっているので動作はOKです。

通電ステージ2〜6も同様に確認します。@<br>{}
@<img>{stage-2}はホールセンサパターンと通電ステージ2の変換を確認している図です。
//image[stage-2][通電ステージ2]{
//}

@<img>{stage-3}はホールセンサパターンと通電ステージ3の変換を確認している図です。
//image[stage-3][通電ステージ3]{
//}

@<img>{stage-4}はホールセンサパターンと通電ステージ4の変換を確認している図です。
//image[stage-4][通電ステージ4]{
//}

@<img>{stage-5}はホールセンサパターンと通電ステージ5の変換を確認している図です。
//image[stage-5][通電ステージ5]{
//}

@<img>{stage-6}はホールセンサパターンと通電ステージ6の変換を確認している図です。
//image[stage-6][通電ステージ6]{
//}

このように確認したいポイントにDisplayブロックを配置していけば信号の状態を確認できます。
組込みソフトウェア開発のprintfデバッグのようです。

Displayブロックでモデルの状態を確認していましたが、同様のことがScopeブロックでできます。
@<img>{scope_setting}はScopeブロックに@<img>{HallandPWMControl}、@<table>{hallpattern_fet_stage_table}の信号を接続したモデルです。
//image[scope_setting][Scopeブロックでモニタリングする例]{
//}

これでシミュレーションを実行しScopeブロックをダブルクリックすると@<img>{hall-stage_scope}の画面になります。
//image[hall-stage_scope][Scopeブロックの表示結果]{
//}
オシロスコープのような画面が表示されます。
一番上の波形は通電ステージ番号です。通電ステージ番号が1から6に変化するとHigh側FET、Low側FETの信号が
@<img>{HallandPWMControl}、@<table>{hallpattern_fet_stage_table}のとおりになっていることが確認できます。@<br>{}
※PWM設定値は0の場合の図なのでPWMのパルス部分は0固定になっています。@<br>{}
このようにScopeブロックはタイミングチャートで規定される各信号を確認するときに便利です。

== スロットル開度の取得
スロットル開度は電圧0〜5VをAD変換して決めます。SimulinkモデルでAD変換を行うAnalog Inputブロックは10bitです。
0Vが0（0x000）、2.5Vが511（0x1FF）、5Vが1023（0x3FF）近辺の値に変換されていればOKです。
任意3点の電圧をAD変換した結果を次に示します。

@<img>{Throttle_256}のDisplay Throttle Voltageは1.302VをAD変換した結果です。
//image[Throttle_256][1.302VをAD変換した結果]{
//}

@<img>{Throttle_512}のDisplay Throttle Voltageは2.594VをAD変換した結果です。
//image[Throttle_512][2.594VをAD変換した結果]{
//}

@<img>{Throttle_1000}のDisplay Throttle Voltageは5.03VをAD変換した結果です。
//image[Throttle_1000][5.03VをAD変換した結果]{
//}

@<table>{Throttle_result_table}は計測結果の一覧表です。@<br>{}
スロットル開度はAD変換値を4で割り、PWMブロック設定値として使用します。@<br>{}
//table[Throttle_result_table][スロットル電圧と開度の動作確認結果]{ 
No	電圧（V）	AD変換値（dec）	開度（dec）
------------------------------------
1	1.302		259			64
2	2.594		518			129
3	5.03		1010		252
//}

3点とも期待値に近い値にAD変換できているので問題なさそうです。

== スタンドアロン動作確認
PCを接続せずスタンドアロンで動作確認します。

Simulinkのメニューからハードウェア -> ビルド、配布および開始 -> ビルド、配布および開始を選択します。
@<img>{program}はそのときの画面です。
//image[program][ビルド、Arduinoに書き込み]{
//}

ビルド、書き込みが終了すると@<img>{program_success}の画面になります。
//image[program_success][ビルド、Arduinoに書き込み終了時の画面]{
//}

@<img>{program_success}を見ると次の表示があります。

 * Programは4.9%
 * Dataは19.2%

本書のモデルはROM使用量が4.9%、RAM使用量が19.2%ということがわかります。

モデルファイル（ev_kart.slx）と同じ階層には次のファイルが出力されています。

 * ev_kart.elf
 * ev_kart.hex

組込みソフトウェア開発でお馴染みのelfファイル、hexファイルです。
おそらくSimulinkで「ビルド、配布および開始」の操作を実行するとhexファイルがArduinoに書き込まれていると思います。

@<img>{program_success}の画面となったらインバーター基板の電源をOFFし、治具基板に接続しているUSBケーブルを取り外します。
その後電源をONします。
この状態でスロットル（正確にいうとスロットルの代用品の可変抵抗）を操作するとモーターが回ります（※1）。
可変抵抗を操作するとモーターの回転数が変化することが確認できます。
これでスタンドアロン動作を確認できました。

※1 筆者のインバーター基板は@<chapref>{issues}末尾のコラムに書いた理由で壊れたためモーターを手回しでアシストしないと回転しません。
正常なハードウェアであれば手回しでアシストしなくてもモーターが回ると思います。
